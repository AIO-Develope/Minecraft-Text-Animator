# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import os
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Main(object):
    def setupUi(self, Main):
        Main.setObjectName("Main")
        Main.resize(556, 606)
        self.gridLayout_2 = QtWidgets.QGridLayout(Main)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.tabWidget = QtWidgets.QTabWidget(Main)
        self.tabWidget.setObjectName("tabWidget")
        self.Blink = QtWidgets.QWidget()
        self.Blink.setObjectName("Blink")
        self.tabWidget.addTab(self.Blink, "")
        self.Wave = QtWidgets.QWidget()
        self.Wave.setObjectName("Wave")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.Wave)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.Text_g = QtWidgets.QGroupBox(self.Wave)
        self.Text_g.setObjectName("Text_g")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.Text_g)
        self.verticalLayout.setObjectName("verticalLayout")
        self.Text = QtWidgets.QLineEdit(self.Text_g)
        self.Text.setAcceptDrops(True)
        self.Text.setAutoFillBackground(False)
        self.Text.setDragEnabled(False)
        self.Text.setObjectName("Text")
        self.verticalLayout.addWidget(self.Text)
        self.gridLayout_3.addWidget(self.Text_g, 0, 0, 1, 2)
        self.Color_g = QtWidgets.QGroupBox(self.Wave)
        self.Color_g.setObjectName("Color_g")
        self.gridLayout = QtWidgets.QGridLayout(self.Color_g)
        self.gridLayout.setObjectName("gridLayout")
        self.Black = QtWidgets.QRadioButton(self.Color_g)
        self.Black.setChecked(True)
        self.Black.setObjectName("Black")
        self.gridLayout.addWidget(self.Black, 0, 0, 1, 1)
        self.DarkBlue = QtWidgets.QRadioButton(self.Color_g)
        self.DarkBlue.setObjectName("DarkBlue")
        self.gridLayout.addWidget(self.DarkBlue, 0, 1, 1, 1)
        self.DarkGreen = QtWidgets.QRadioButton(self.Color_g)
        self.DarkGreen.setObjectName("DarkGreen")
        self.gridLayout.addWidget(self.DarkGreen, 1, 0, 1, 1)
        self.DarkAqua = QtWidgets.QRadioButton(self.Color_g)
        self.DarkAqua.setObjectName("DarkAqua")
        self.gridLayout.addWidget(self.DarkAqua, 1, 1, 1, 1)
        self.DarkRed = QtWidgets.QRadioButton(self.Color_g)
        self.DarkRed.setObjectName("DarkRed")
        self.gridLayout.addWidget(self.DarkRed, 2, 0, 1, 1)
        self.DarkPurple = QtWidgets.QRadioButton(self.Color_g)
        self.DarkPurple.setObjectName("DarkPurple")
        self.gridLayout.addWidget(self.DarkPurple, 2, 1, 1, 1)
        self.Gold = QtWidgets.QRadioButton(self.Color_g)
        self.Gold.setObjectName("Gold")
        self.gridLayout.addWidget(self.Gold, 3, 0, 1, 1)
        self.Gray = QtWidgets.QRadioButton(self.Color_g)
        self.Gray.setObjectName("Gray")
        self.gridLayout.addWidget(self.Gray, 3, 1, 1, 1)
        self.DarkGray = QtWidgets.QRadioButton(self.Color_g)
        self.DarkGray.setObjectName("DarkGray")
        self.gridLayout.addWidget(self.DarkGray, 4, 0, 1, 1)
        self.Blue = QtWidgets.QRadioButton(self.Color_g)
        self.Blue.setObjectName("Blue")
        self.gridLayout.addWidget(self.Blue, 4, 1, 1, 1)
        self.Green = QtWidgets.QRadioButton(self.Color_g)
        self.Green.setObjectName("Green")
        self.gridLayout.addWidget(self.Green, 5, 0, 1, 1)
        self.Aqua = QtWidgets.QRadioButton(self.Color_g)
        self.Aqua.setObjectName("Aqua")
        self.gridLayout.addWidget(self.Aqua, 5, 1, 1, 1)
        self.Red = QtWidgets.QRadioButton(self.Color_g)
        self.Red.setObjectName("Red")
        self.gridLayout.addWidget(self.Red, 6, 0, 1, 1)
        self.LightPurple = QtWidgets.QRadioButton(self.Color_g)
        self.LightPurple.setObjectName("LightPurple")
        self.gridLayout.addWidget(self.LightPurple, 6, 1, 1, 1)
        self.Yellow = QtWidgets.QRadioButton(self.Color_g)
        self.Yellow.setObjectName("Yellow")
        self.gridLayout.addWidget(self.Yellow, 7, 0, 1, 1)
        self.White = QtWidgets.QRadioButton(self.Color_g)
        self.White.setObjectName("White")
        self.gridLayout.addWidget(self.White, 7, 1, 1, 1)
        self.gridLayout_3.addWidget(self.Color_g, 1, 0, 1, 1)
        self.PluginFormatted_g = QtWidgets.QGroupBox(self.Wave)
        self.PluginFormatted_g.setObjectName("PluginFormatted_g")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.PluginFormatted_g)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.Non_Formatted_r = QtWidgets.QRadioButton(self.PluginFormatted_g)
        self.Non_Formatted_r.setChecked(True)
        self.Non_Formatted_r.setObjectName("Non_Formatted_r")
        self.verticalLayout_2.addWidget(self.Non_Formatted_r)
        self.Tab_r = QtWidgets.QRadioButton(self.PluginFormatted_g)
        self.Tab_r.setObjectName("Tab_r")
        self.verticalLayout_2.addWidget(self.Tab_r)
        self.AnimatedScoreboard_r = QtWidgets.QRadioButton(self.PluginFormatted_g)
        self.AnimatedScoreboard_r.setObjectName("AnimatedScoreboard_r")
        self.verticalLayout_2.addWidget(self.AnimatedScoreboard_r)
        self.Scoreboard_r = QtWidgets.QRadioButton(self.PluginFormatted_g)
        self.Scoreboard_r.setObjectName("Scoreboard_r")
        self.verticalLayout_2.addWidget(self.Scoreboard_r)
        self.gridLayout_3.addWidget(self.PluginFormatted_g, 1, 1, 1, 1)
        self.Generate = QtWidgets.QPushButton(self.Wave)
        self.Generate.setObjectName("Generate")
        self.gridLayout_3.addWidget(self.Generate, 2, 0, 1, 2)
        self.Export = QtWidgets.QTextEdit(self.Wave)
        self.Export.setReadOnly(True)
        self.Export.setObjectName("Export")
        self.gridLayout_3.addWidget(self.Export, 3, 0, 1, 2)
        self.tabWidget.addTab(self.Wave, "")
        self.gridLayout_2.addWidget(self.tabWidget, 0, 0, 1, 1)

        self.retranslateUi(Main)
        self.tabWidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(Main)


        def get_color():
            # --start-- color

            if self.Black.isChecked():
                color = "&0"

            if self.DarkBlue.isChecked():
                color = "&1"

            if self.DarkGreen.isChecked():
                color = "&2"

            if self.DarkAqua.isChecked():
                color = "&3"

            if self.DarkRed.isChecked():
                color = "&4"

            if self.DarkPurple.isChecked():
                color = "&5"
            
            if self.Gold.isChecked():
                color = "&6"

            if self.Gray.isChecked():
                color = "&7"

            if self.DarkGray.isChecked():
                color = "&8"

            if self.Blue.isChecked():
                color = "&9"

            if self.Green.isChecked():
                color = "&a"
                
            if self.Aqua.isChecked():
                color = "&b"

            if self.Red.isChecked():
                color = "&c"

            if self.LightPurple.isChecked():
                color = "&d"

            if self.Yellow.isChecked():
                color = "&e"

            if self.White.isChecked():
                color = "&f"


            return color
            # --stop-- color

        def get_format():
            # --start-- color

            if self.Non_Formatted_r.isChecked():
                format_prefix = ""
                format_sufix = ""

            if self.Tab_r.isChecked():
                format_prefix = "        - '"
                format_sufix = "'"

            if self.AnimatedScoreboard_r.isChecked():
                format_prefix = "  - '"
                format_sufix = "'"

            if self.Scoreboard_r.isChecked():
                format_prefix = "  - '"
                format_sufix = "'"

            return format_prefix, format_sufix

# --start-- custome code

        def generate_script():
            
            u_text = self.Text.text()
            
            color = (get_color())
            format_prefix, format_sufix = (get_format())

            # --start-- text verarbeitung

            def split(u_text):
                return [char for char in u_text]

            c_text = len(u_text)
            s_text = split(u_text)

            for i in range(c_text + 1):
                s_text.insert(i, color)
                s_text.insert(i + 2, '&r')

                f = open("output.txt", "a")
                f.write(format_prefix + "".join(s_text) + format_sufix + "\n")
                f.close()

                try:

                    del s_text[i + 2]
                    del s_text[i]
                except:
                    pass
                # --stop-- text verarbeitung

            # --start-- export

            f = open('output.txt', 'r+')
            ft = f.read()
            self.Export.setPlainText(ft)
            f.close()

            os.remove("output.txt")

            # --stop-- export

        # --stop-- scripts

        # --start-- events connect ui

        self.Generate.clicked.connect(generate_script)

        # --stop-- events connect ui

# --stop-- custome code


    def retranslateUi(self, Main):
        _translate = QtCore.QCoreApplication.translate
        Main.setWindowTitle(_translate("Main", "Minecraft Text Animator"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Blink), _translate("Main", "Blink"))
        self.Text_g.setTitle(_translate("Main", "Text"))
        self.Color_g.setTitle(_translate("Main", "Color"))
        self.Black.setText(_translate("Main", "Black"))
        self.DarkBlue.setText(_translate("Main", "Dark Blue"))
        self.DarkGreen.setText(_translate("Main", "Dark Green"))
        self.DarkAqua.setText(_translate("Main", "Dark Aqua"))
        self.DarkRed.setText(_translate("Main", "Dark Red"))
        self.DarkPurple.setText(_translate("Main", "Dark Purple"))
        self.Gold.setText(_translate("Main", "Gold"))
        self.Gray.setText(_translate("Main", "Gray"))
        self.DarkGray.setText(_translate("Main", "Dark Gray"))
        self.Blue.setText(_translate("Main", "Blue"))
        self.Green.setText(_translate("Main", "Green"))
        self.Aqua.setText(_translate("Main", "Aqua"))
        self.Red.setText(_translate("Main", "Red"))
        self.LightPurple.setText(_translate("Main", "Light Purple"))
        self.Yellow.setText(_translate("Main", "Yellow"))
        self.White.setText(_translate("Main", "White"))
        self.PluginFormatted_g.setTitle(_translate("Main", "Plugin Formated"))
        self.Non_Formatted_r.setText(_translate("Main", "Non Formated"))
        self.Tab_r.setText(_translate("Main", "Tab"))
        self.AnimatedScoreboard_r.setText(_translate("Main", "AnimatedScoreboard"))
        self.Scoreboard_r.setText(_translate("Main", "Scoreboard R4"))
        self.Generate.setText(_translate("Main", "Generate"))
        self.Export.setHtml(_translate("Main", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Wave), _translate("Main", "Wave"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Main = QtWidgets.QWidget()
    ui = Ui_Main()
    ui.setupUi(Main)
    Main.show()
    sys.exit(app.exec_())
